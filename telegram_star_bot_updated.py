import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}
order_stats = {"total": 0, "done": 0, "pending": 0}


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @user123):")


@dp.message_handler(commands=['admin'])
async def admin_handler(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
                f"–í—Å–µ–≥–æ: {order_stats['total']}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {order_stats['done']}\n"
                f"üïí –û–∂–∏–¥–∞—é—Ç: {order_stats['pending']}")
        await message.answer(text)


@dp.message_handler(lambda msg: msg.text.startswith("@"))
async def handle_username(message: types.Message):
    user_data[message.from_user.id] = message.text
    order_stats["total"] += 1
    order_stats["pending"] += 1
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def confirm_payment(message: types.Message):
    username = user_data.get(message.from_user.id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data=f"confirm:{message.from_user.id}:{username}"
    )
    keyboard.add(button)
    await bot.send_message(ADMIN_ID, f"üí∏ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}\n"
                                     f"Username: {username}", reply_markup=keyboard)
    await message.answer("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")


@dp.callback_query_handler(lambda c: c.data.startswith("confirm:"))
async def handle_confirm(callback: types.CallbackQuery):
    _, user_id, username = callback.data.split(":")
    user_id = int(user_id)
    order_stats["done"] += 1
    order_stats["pending"] -= 1
    await bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ó–≤—ë–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {username}.")
    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
